" Use the same plugin download directory for both Vim and NeoVim.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the lcader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
let g:spacevim_localleader = '\'

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_layers = [
      \ 'better-defaults', 'code-snippets', 'cscope', 'editing',
      \ 'file-manager', 'fzf', 'git', 'lightline', 'lsp', 'markdown', 'programming',
      \ 'rust', 'spacevim', 'syntax-checking', 'text-align', 'which-key'
      \ ]

" Uncomment the following line if your terminal(-emulator) supports true colors.
let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
let g:spacevim_nerd_fonts = 1

" Experimental (as of 9/6/20)
let g:spacevim_enable_clap = 1

" Language Server
let g:spacevim_lsp_engine = 'coc'

" Exclude plugins
let g:spacevim_excluded = ['scrooloose/nerdtree', 'neoclide/coc-neco', 'haya14busaincsearch-easymotion.vim', 'justinmk/vim-sneak']

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()

  " Add your own plugin via Plug command.
  Plug 'hashivim/vim-terraform'
  Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'unisonweb/unison', { 'branch': 'trunk', 'rtp': 'editor-support/vim' }
  Plug 'vmchale/dhall-vim'
  Plug 'folke/flash.nvim'
  Plug 'nvim-treesitter/nvim-treesitter'

endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()

  " disable quick-scope due to error on line 74
  let g:loaded_quick_scope = 1

  " Options
  set clipboard&
  set completeopt=menu,preview
  set foldlevel=99
  set ignorecase
  set norelativenumber
  set noshowmode     " lightline
  set number
  set showtabline=2  " lightline
  set smartcase
  set splitbelow
  set splitright
  set title
  set viewoptions=cursor,folds,slash,unix

  " Mappings

  " vim-which-key leader guide mappings + descriptions
  " see: https://github.com/liuchengxu/space-vim/issues/419
  let g:spacevim#map#leader#desc = g:spacevim#map#leader#desc

  silent! nunmap <leader>?
  silent! nunmap <leader>C
  silent! unmap <leader>ff
  silent! unmap <leader>fc
  silent! unmap <leader>fC
  silent! unmap <leader>fs
  silent! unmap <leader>gc

  " Custom commands
  command! BufOnly silent! execute "%bd|e#|bd#"

  let g:spacevim#map#leader#desc['?'] = [':Clap help_tags', 'search-help-tags']
  let g:spacevim#map#leader#desc['C'] = [':Clap providers', ':Clap']
  let g:spacevim#map#leader#desc['b']['o'] = [':BufOnly', 'only-this-buffer']
  let g:spacevim#map#leader#desc['f']['f'] = [':Clap files! %:h', 'files-in-current-directory']
  let g:spacevim#map#leader#desc['f']['c'] = [':let @*=expand(''%:t'') | echo ''Copied to clipboard: '' . @*', 'copy-file-name']
  let g:spacevim#map#leader#desc['f']['C'] = [':let @*=expand(''%:p'') | echo ''Copied to clipboard: '' . @*', 'copy-file-path']
  let g:spacevim#map#leader#desc['f']['s'] = [':Clap grep2! %:h', 'search-in-current-directory']
  let g:spacevim#map#leader#desc['g']['c'] = [':Clap bcommits!', 'search-commits-for-current-file']
  let g:spacevim#map#leader#desc['h'] = [':Clap help_tags', 'search-help-tags']
  let g:spacevim#map#leader#desc['e']['n'] = [':call CocAction(''diagnosticNext'')<CR>', 'next-error']
  let g:spacevim#map#leader#desc['e']['p'] = [':call CocAction(''diagnosticPrevious'')<CR>', 'previous-error']

  " regular mappings
  nnoremap Y v$hy
  nnoremap vv vV
  nnoremap V v$h
  nnoremap <BS> <C-O>
  nnoremap <ESC> <C-I>

  nnoremap _t :tabs<CR>
  nnoremap _b :buffers<CR>
  vnoremap <CR> :
  nnoremap <TAB> <C-W>w
  nnoremap <S-TAB> <C-W>W

  " undo space-vim default mapping
  iunmap jj

  " vim-clap: <C-R> used to search history
  cunmap <C-R>
  cnoremap <C-R><C-R> :<c-u>call spacevim#map#manager#CommandHistory()<CR>

  " toggle diff of open windows
  function! DiffToggle()
    if &diff
      :diffoff
    else
      :windo diffthis
    endif
  endfunction

  nnoremap _d :call DiffToggle()<CR>

  " follow 'route' style filepaths
  function! FollowRoutePath() abort
    let target_path = expand('<cfile>')
    let ext = expand('<cfile>:e')
    " if valid root path exists, prefer that
    if target_path[0] == '/' && empty(glob(target_path))
      " use netrw to browse images
      if index(['jpeg', 'jpg', 'png'], ext) >= 0
        call netrw#BrowseX(target_path[1:],0)
      else
        execute 'edit ' . target_path[1:]
      endif
    else
      norm! gf
    endif
  endfunction
  nnoremap gf :call FollowRoutePath()<CR>

  function! OpenGithub()
    let file = expand("%:p")
    let line = getcurpos()[1]

    let repo_full_path = split(execute("!git rev-parse --show-toplevel"), "\n")[-1]
    let branch = split(execute("!git rev-parse --abbrev-ref HEAD"))[-1]
    let remote = split(split(execute("!git remote -v"))[-2], ":")[-1]

    let file_repo_path = substitute(file, repo_full_path, '', '')
    let file_repo_path = "https://github.com/" . remote . "/tree/" . branch . file_repo_path . "\\#L" . line

    " OSX only
    execute("!open " . file_repo_path)
  endfunction

  nnoremap _g :silent! call OpenGithub()<CR>

  nmap <left>  :3wincmd <<cr>
  nmap <right> :3wincmd ><cr>
  nmap <up>    :3wincmd +<cr>
  nmap <down>  :3wincmd -<cr>

  " Filetypes
  augroup FileTypeConfiguration
    autocmd FileType html setlocal shiftwidth=2 tabstop=2 foldmethod=syntax
    autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2
    autocmd FileType javascript setlocal wrap linebreak shiftwidth=2 tabstop=2
    autocmd FileType json setlocal shiftwidth=2 tabstop=2 foldmethod=syntax
    autocmd FileType markdown setlocal shiftwidth=4 tabstop=4 foldmethod=indent
    autocmd FileType rust setlocal foldmethod=syntax
    autocmd FileType sql setlocal shiftwidth=2 tabstop=2 foldmethod=indent
    autocmd FileType haskell setlocal shiftwidth=2 tabstop=2 foldmethod=indent
    autocmd FileType text setlocal wrap linebreak nolist shiftwidth=2 tabstop=2 textwidth=0 wrapmargin=0
    autocmd FileType python setlocal foldmethod=syntax
    au BufRead,BufNewFile *.txt,*.tex,*.md set wrap linebreak nolist textwidth=0 wrapmargin=0
    au BufNewFile,BufRead *.coco set filetype=python
    au BufNewFile,BufRead *.sc set filetype=scala
    au BufNewFile,BufRead *.ipynb set filetype=json
    au BufNewFile,BufRead *.ddl,*.hql set filetype=sql
  augroup END

  " Appearance
  " :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  colorscheme space-vim-dark
  hi LineNr ctermbg=NONE ctermfg=243 guibg=NONE guifg=#767676
  hi SpecialComment ctermfg=38 guifg=#0087d7
  hi Error      gui=None guifg=#ff5e86
  hi ErrorMsg   gui=bold guifg=#ff5e86
  hi Warning    gui=NONE guifg=#fabd2f
  hi WarningMsg gui=bold guifg=#fabd2f
  hi Todo       gui=bold guifg=#d697e6
  hi DiffAdd    gui=NONE guifg=#a4e93e guibg=#3a3a3a
  hi DiffChange gui=NONE guifg=#fabd2f guibg=#3a3a3a
  hi DiffDelete gui=NONE guifg=#ff5e86 guibg=#3a3a3a
  hi DiffText   gui=NONE guifg=#fabd2f guibg=#827400
  hi! link diffAdded DiffAdd
  hi! link diffChanged DiffChange
  hi! link diffRemoved DiffDelete
  hi! link GitGutterAdd DiffAdd
  hi! link GitGutterChange DiffChange
  hi! link GitGutterDelete DiffDelete
  hi CurrentWordTwins cterm=bold,underline ctermfg=40 ctermbg=234 gui=bold,underline guifg=#00ff00

  " Configuring pylint
  " - install pylint
  " - generate a pylintrc in root of project (pylint --generate-rcfile)
  " - comment out config options with trailing `=`
  " - add .vim/settings.json to project (https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json)
  " - add .vim and .pylint to <repo>/.git/info/exclude
  " - include "args": ["--rcfile", "PATH/TO/.pylint"] in "pylint" object

  " UltiSnips
  inoremap <silent> <C-G> <C-R>=UltiSnips#ExpandSnippetOrJump()<cr>
  snoremap <silent> <Tab> <Tab>
  snoremap <silent> <S-Tab> <S-Tab>
  snoremap <silent> <PageUp> <NOP>
  snoremap <silent> <PageDown> <NOP>
  let &runtimepath .= ','.expand('~/Prefs')
  let g:UltiSnipsSnippetDirectories=['UltiSnips', 'custom_snippets']
  let g:ultisnips_python_style = 'google'
  let g:UltiSnipsJumpForwardTrigger = '<PageDown>'
  let g:UltiSnipsJumpBackwardTrigger = '<PageUp>'

  " lightline
  " wombat theme + powerline insert mode
  " is there a better way to modify *just* the insert mode colors?
  silent! source ~/Prefs/wombat_modified.vim
  let g:lightline = {
    \ 'colorscheme': 'wombat_modified',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ]
    \ }
    \ }
  let g:lightline.enable = {
  \    'statusline': 1,
  \    'tabline': 1
  \  }
  let g:lightline.tab = {
  \    'active': [ 'tabnum', 'filename', 'modified' ],
  \    'inactive': [ 'tabnum', 'filename', 'modified' ] }

  " Undotree
  let g:undotree_SetFocusWhenToggle = 1
  nmap _u :UndotreeToggle<CR>

  " TODO reorder alphabetically by plugin
  " traces.vim
  let g:traces_num_range_preview = 1

  " Mode-specific cursors
  " START HERE: :h $TERM
  " - https://vim.fandom.com/wiki/Configuring_the_cursor
  " - SpaceVim/autoload/SpaceVim/layers/core/statusline.vim
  set termguicolors
  hi Cursor guifg=bg guibg=fg
  exe 'hi! iCursor gui=bold cterm=bold ctermbg=' . 117 . ' ctermfg=' . 117 . ' guibg=' . '#87dfff' . ' guifg=' . '#87dfff'
  exe 'hi! vCursor gui=bold cterm=bold ctermbg=' . 216 . ' ctermfg=' . 216 . ' guibg=' . '#f2c68a' . ' guifg=' . '#f2c68a'

  set guicursor=n-c:block-Cursor
  set guicursor+=i:ver25-iCursor
  set guicursor+=v:block-vCursor

  " revert cursor when leaving
  " https://github.com/neovim/neovim/wiki/FAQ#cursor-style-isnt-restored-after-exiting-nvim
  au VimLeave * set guicursor=a:block-blinkon0

  " For saner snippets
  augroup SanerSnippets
    autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
    " use TAB for cycling completions
    inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<C-i>"
    inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-i>"
  augroup END

  " enable vim-clap action to copy selection into 0 register
  function! s:CopyTo0RegisterFunc(text) abort
    let @0 = a:text
  endfunction
  command! -nargs=1 CopyTo0Register call s:CopyTo0RegisterFunc(<f-args>)

  " vim-clap
  let g:clap_open_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit',
    \ 'ctrl-y': 'CopyTo0Register'
  \ }
  let g:clap_preview_direction = 'UD'
  let g:clap_preview_size = { '*': 25, 'files': 50, 'grep2': 50 }
  let g:clap_layout = { 'relative': 'editor', 'width': '80%', 'col': '10%', 'height': '20%', 'row': '5%' }
  let g:BcommitsToDiff = g:clap#provider#bcommits#

  function! g:BcommitsToDiff.sink(line) abort
    let rev = clap#provider#commits#parse_rev(a:line)
    exe 'Gdiffsplit ' . rev . '~1'
  endfunction

  " coc
  hi! link CocErrorSign Error
  hi! link CocWarningSign Warning

  " flash.nvim
  source ~/Prefs/init.lua.vim
  hi! FlashBackdrop guifg=#5C6370 ctermfg=59
  hi FlashMatch guifg=#8a6716 guibg=#292b2e
  hi FlashCurrent guifg=#292b2e guibg=#8a6716 
  hi FlashLabel gui=bold guifg=#fabd2f

endfunction
